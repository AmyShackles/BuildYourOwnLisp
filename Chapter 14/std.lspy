;;; Standard Library for Lisp

;;; Atoms (fundamental constants)
(def {nil} {})
(def {true} 1)
(def {false} 0)

;;; Functional definitions

; Function definitions
(def {fun} (\ {f b} {
    def (head f) (\ (tail f) b)
}))

; Open new scope
(fun {let b} {
    ((\ {_} b) ())
})

; Unapply list to Function
(fun {pack f & xs} {f xs})

; Unpack list to Function
(fun {unpack f l} {
    eval (join (list f) l)
})

; Curried and uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Perform several things in sequence
(fun {do & l} {
    if (== l nil)
        {nil}
        {last l}
})

;;; Logical functions

; Logical functions
(fun {not x} {- 1 x})
(fun {or x y} {+ x y})
(fun {and x y} {* x y})

;;; Numeric functions

; Minimum of arguments
(fun {min & xs} {
    if (== (tail xs) nil) {fst xs}
        {do
            (= {rest} (unpack min (tail xs)))
            (= {item} (fst xs))
            (if (< item rest) {item} {rest})
        }
})

; Maximum of arguments
(fun {max & xs} {
    if (== (tail xs) nil) {fst xs}
        {do
            (= {rest} (unpack max (tail xs)))
            (= {item} (fst xs))
            (if (> item rest) {item} {rest})
        }
})

;;; Conditional functions

(fun {select & cs} {
    if (== cs nil)
        {error "No selection found."}
        {if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}
})

(fun {case x & cs} {
    if (== cs nil)
        {error "No case found."}
        {if (== x (fst (fst cs))) {snd (fst cs)} {
            unpack case (join (list x) (tail cs))}}
})

(def {otherwise} true)

;;; Miscellaneous functions

(fun {flip f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

;;; List functions

; First, Second, or Third items in a list

(fun {fst l} { eval (head l) })
(fun {snd l} { eval (head (tail l)) })
(fun {trd l} { eval (head (tail (tail l))) })

; List length
(fun {len l} {
    if (== l nil)
        {0}
        {+ 1 (len (tail l))}
})

; Nth item in list
(fun {nth n l} {
    if (== n 0)
        {fst l}
        {nth (- n 1) (tail l)}
})

; Last item in list
(fun {last l} {nth (- (len l) 1) l})

; Apply function to list
(fun {map f l} {
    if (== l nil)
        {nil}
        {join (list (f (fst l))) (map f (tail l))}
})

; Apply filter to list
(fun {filter f l} {
    if (== l nil)
        {nil}
        {join (if (f (fst l)) {head l} {nil}) (filter f (tail l))}
})

; Return all of list but last element
(fun {init l} {
    if (== (tail l) nil)
        {nil}
        {join (head l) (init (tail l))}
})

; Reverse list
(fun {reverse l} {
    if (== l nil)
        {nil}
        {join (reverse (tail l)) (head l)}
})

; Fold left
(fun {foldl f z l} {
    if (== l nil)
        {z}
        {foldl f (f z (fst l)) (tail l)}
})

; Fold right
(fun {folder f z l} {
    if (== l nil)
        {z}
        {if (fst l) (foldr f z (tail l))}
})

(fun {sum l} {foldl + 0 l})
(fun {product l} {foldl * 1 l})

; Take N items
(fun {take n l} {
    if (== n 0)
        {nil}
        {join (head l) (tail (- n 1) (tail l))}
})

; Drop N items
(fun {drop n l} {
    if (== n 0)
        {l}
        {drop (- n 1) (tail l)}
})

; Split at N
(fun {split n l} {list (take n l) (drop n l)})

; Take while
(fun {take-while f l} {
    if (not (unpack f (head l)))
        {nil}
        {join (head l) (take-while f (tail l))}
})

; Drop while
(fun {drop-while f l} {
    if (not (unpack f (head l)))
        {l}
        {drop-while f (tail l)}
})

; Element of list
(fun {elem x l} {
    if (== l nil)
        {false}
        {if (== x (fst l)) {true} {elem x (tail l)}}
})

; Find element in list of pairs
(fun {lookup x l} {
    if (== l nil)
        {error "No element found"}
        {do
            (= {key} (fst (fst l)))
            (= {val} (snd (fst l)))
            (if (== key x) {val} {lookup x (tail l)})
        }
})

; Zip two lists together into a list of pairs
(fun {zip x y} {
    if (or (== x nil) (== y nil))
        {nil}
        {join (list (join (head x) (head y))) (zip (tail x) (tail y))}
})

; Unzip a list of pairs into two lists
(fun {unzip l} {
    if (== l nil)
        {{nil nil}}
        {do
            (= {x} (fst l))
            (= {xs} (unzip (tail l)))
            (list (join (head x) (fst xs)) (join (tail x) (snd xs)))
        }
})

; Fibonacci
(fun {fib n} {
    select
        { (== n 0) 0 }
        { (== n 1) 1 }
        { otherwise (+ (fib (- n 1)) (fib (- n 2))) }
})